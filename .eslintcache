[{"E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\index.js":"1","E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\App.js":"2","E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\components\\login\\firebase.config.js":"3","E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\reportWebVitals.js":"4","E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\pages\\Dashboard.js":"5","E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\components\\Footer.js":"6","E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\pages\\Login.js":"7","E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\components\\Header.js":"8","E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\components\\login\\LogInManager.js":"9","E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\components\\PrivateRoute.js":"10"},{"size":523,"mtime":1607004020421,"results":"11","hashOfConfig":"12"},{"size":993,"mtime":1607697933417,"results":"13","hashOfConfig":"12"},{"size":353,"mtime":1607618382644,"results":"14","hashOfConfig":"12"},{"size":362,"mtime":1606998684728,"results":"15","hashOfConfig":"12"},{"size":190,"mtime":1607710287645,"results":"16","hashOfConfig":"12"},{"size":458,"mtime":1607004784474,"results":"17","hashOfConfig":"12"},{"size":11431,"mtime":1607713516304,"results":"18","hashOfConfig":"12"},{"size":1436,"mtime":1607716265272,"results":"19","hashOfConfig":"12"},{"size":5161,"mtime":1607714376385,"results":"20","hashOfConfig":"12"},{"size":569,"mtime":1607045078927,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"qzo5a3",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\index.js",[],["46","47"],"E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\App.js",[],"E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\components\\login\\firebase.config.js",[],"E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\reportWebVitals.js",[],"E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\pages\\Dashboard.js",[],"E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\components\\Footer.js",[],"E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\pages\\Login.js",["48"],"import { faFacebook, faGithub, faGoogle } from '@fortawesome/free-brands-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport React, { useContext, useState } from 'react'\r\nimport { Link, useHistory, useLocation } from 'react-router-dom'\r\nimport { UserContext } from '../App'\r\nimport { createUserWithEmailAndPassword, handleFbSignIn, handleGitHubSignIn, handleGoogleSignIn, initializeLoginFramework, signInWithEmailAndPassword } from '../components/login/LogInManager'\r\n\r\n\r\n\r\nconst Login = () => {\r\n\r\n    // State for new user\r\n    const [newUser, setNewUser] = useState(false);\r\n    // Multiple argument state\r\n    const [user, setUser] = useState({\r\n        isSignedIn: false,\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        photo: '',\r\n        SignUpSuccess: false,\r\n        success: false,\r\n        error: '',\r\n    })\r\n\r\n    // Call firebase authentication function from LogInManager.js\r\n    initializeLoginFramework()\r\n\r\n    const [loggedInUser, setLogInUser] = useContext(UserContext)\r\n    const history = useHistory()\r\n    const location = useLocation()\r\n    const { from } = location.state || { from: { pathname: '/dashboard' }, }\r\n\r\n    // Google sign in event handler\r\n    const googleSignIn = () => {\r\n        handleGoogleSignIn().then((res) => {\r\n        handleResponse(res, true)\r\n        })\r\n    }\r\n\r\n    // Facebook sign in event handler\r\n    const fbLogIn = () => {\r\n        handleFbSignIn()\r\n            .then((res) => {\r\n                setUser(res)\r\n                handleResponse(res, true)\r\n            })\r\n    }\r\n\r\n    // GitHub sign in event handler\r\n    const gitHubLogIn = () => {\r\n        handleGitHubSignIn()\r\n            .then((res) => {\r\n                setUser(res)\r\n                handleResponse(res, true)\r\n            })\r\n    }\r\n\r\n    // Create response function\r\n    const handleResponse = (res, redirect) => {\r\n        setUser(res)\r\n        setLogInUser(res)\r\n        if (redirect) {\r\n        history.replace(from)\r\n        }\r\n    }\r\n\r\n    // Catch event when field is blur\r\n    const handleBlur = (e) => {\r\n        let isFieldValid\r\n        if (e.target.name === 'name') {\r\n        isFieldValid = e.target.value\r\n        }\r\n        if (e.target.name === 'email') {\r\n        // validation email\r\n        isFieldValid = /\\S+@\\S+\\.\\S+/.test(e.target.value)\r\n        } \r\n        if (e.target.name === 'password') {\r\n        // validation 1 uppercase 1 lowercase 1 number\r\n        isFieldValid = /^(?=(?:.*[A-Z]){1})(?=(?:.*[a-z]){1})(?=(?:.*[0-9]){1})\\S{6,20}$/.test(\r\n            e.target.value\r\n        )\r\n        }\r\n        if (isFieldValid) {\r\n        const newUserInfo = { ...user }\r\n        newUserInfo[e.target.name] = e.target.value\r\n        setUser(newUserInfo)\r\n        }\r\n    }\r\n\r\n    // Form submit handler\r\n    const handleSubmit = (e) => {\r\n        // Sign Up with email and password\r\n        if (newUser && user.name && user.email && user.password) {\r\n            createUserWithEmailAndPassword(user.name, user.email, user.password)\r\n                .then((res) => {\r\n                    setUser(res)\r\n                    setLogInUser(res)\r\n                    // Call response handler from below function\r\n                    handleResponse(res, true)\r\n            })\r\n        }\r\n        // Log In with email and password\r\n        if (!newUser && user.email && user.password) {\r\n            signInWithEmailAndPassword(user.email, user.password)\r\n                .then((res) => {\r\n                    setUser(res)\r\n                    setLogInUser(res)\r\n                    // Call response handler from below function\r\n                    handleResponse(res, true)\r\n            })\r\n         }\r\n        e.preventDefault()\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className='text-center'>\r\n                {!newUser && (\r\n                    <form  onSubmit={handleSubmit}>\r\n                        <div className='form-field p-4'>\r\n                            <h4 className='text-left mb-5 ml-3'>\r\n                                Login\r\n                            </h4>\r\n                            <p>\r\n                                <input\r\n                                    className='mb-2'\r\n                                    type='email'\r\n                                    onBlur={handleBlur}\r\n                                    name='email'\r\n                                    placeholder='Email'\r\n                                    required\r\n                                />\r\n                            </p>\r\n                            <p>\r\n                                <input\r\n                                    className='mb-2'\r\n                                    type='password'\r\n                                    onBlur={handleBlur}\r\n                                    name='password'\r\n                                    placeholder='Password'\r\n                                    required\r\n                                /> \r\n                            </p>\r\n                                <input\r\n                                    className='mt-3'\r\n                                    type='submit'\r\n                                    value='Login'\r\n                                />\r\n                            <p>\r\n                                <div>\r\n                                <span>Don't have an account?</span>\r\n                                <span className='pl-1'>\r\n                                <Link onClick={() => setNewUser(!newUser)}>\r\n                                    <span className='login-qstn'>Create an account</span>\r\n                                </Link>\r\n                                </span>\r\n                            </div>\r\n                            </p>\r\n                        </div>\r\n                    </form>\r\n                )}\r\n                \r\n                {newUser && (\r\n                    <form  onSubmit={handleSubmit}>\r\n                    <div className='form-field p-4'>\r\n                        <h4 className='text-left mb-5 ml-3'>\r\n                            Created an account\r\n                        </h4>\r\n                        <p>  \r\n                            <input\r\n                                className='mb-2'\r\n                                type='text'\r\n                                onBlur={handleBlur}\r\n                                name='name'\r\n                                placeholder='First Name'\r\n                                required\r\n                            />\r\n                        </p>\r\n                        <p>    \r\n                            <input\r\n                                className='mb-2'\r\n                                type='text'\r\n                                onBlur={handleBlur}\r\n                                name='name'\r\n                                placeholder='Last Name'\r\n                                required\r\n                            /> \r\n                        </p>\r\n                        <p>\r\n                            <input\r\n                                className='mb-2'\r\n                                type='email'\r\n                                onBlur={handleBlur}\r\n                                name='email'\r\n                                placeholder='Email'\r\n                                required\r\n                            />\r\n                        </p>\r\n                        <p>\r\n                            <input\r\n                                className='mb-2'\r\n                                type='password'\r\n                                onBlur={handleBlur}\r\n                                name='password'\r\n                                placeholder='Password'\r\n                                required\r\n                            /> \r\n                        </p>\r\n                        <p> \r\n                            <input\r\n                                className='mb-2'\r\n                                type='password'\r\n                                onBlur={handleBlur}\r\n                                name='password'\r\n                                placeholder='Confirm Password'\r\n                                required\r\n                            />\r\n                        </p>\r\n                            <input\r\n                                className='mt-3'\r\n                                type='submit'\r\n                                value='Create an account'\r\n                            />\r\n                        <p>\r\n                            <div>\r\n                            <span>Already have an account?</span>\r\n                            <span className='pl-1'>\r\n                            <Link onClick={() => setNewUser(!newUser)}>\r\n                                Login\r\n                            </Link>\r\n                            </span>\r\n                        </div>\r\n                        </p>\r\n                    </div>\r\n                </form>\r\n                )}\r\n                {user.success &&\r\n                    <p style={{ color: 'yellow' }}>Successfully login</p>\r\n                }\r\n                {user.SignUpSuccess &&\r\n                    <div>\r\n                        <p style={{ color: 'yellow' }}>Account successfully created</p>\r\n                        <p style={{ color: 'yellow' }}>Login your account</p>\r\n                    </div>\r\n                }\r\n                {user.error ? <p style={{ color: 'red' }}>{user.error}</p> : null\r\n                }\r\n                    \r\n                    <div className='d-flex flex-wrap justify-content-center align-items-center'>\r\n                        <p className='divider'></p>\r\n                        Or\r\n                        <p className='divider'></p>\r\n                    </div>\r\n                    <div className='mb-2 mt-3'>\r\n                        <button className='sign-btn' onClick={fbLogIn}>\r\n                            <div className='d-flex justify-content-between align-items-center'>\r\n                            <FontAwesomeIcon className='text-white' icon={faFacebook} style={{fontSize: '30px'}} />\r\n                            <span className='text-white ml-5'>Continue with Facebook</span>\r\n                            </div>\r\n                        </button>\r\n                    </div>\r\n                    <div className='mb-2'>\r\n                        <button className='sign-btn' onClick={googleSignIn}>\r\n                            <div className='d-flex justify-content-between align-items-center'>\r\n                            <FontAwesomeIcon className='text-white' icon={faGoogle} style={{fontSize: '30px'}} />\r\n                            <span className='text-white ml-5'>Continue with Google</span>\r\n                            </div>\r\n                        </button>\r\n                </div>\r\n                <div>\r\n                        <button className='sign-btn' onClick={gitHubLogIn}>\r\n                            <div className='d-flex justify-content-between align-items-center'>\r\n                            <FontAwesomeIcon className='text-white' icon={faGithub} style={{fontSize: '30px'}} />\r\n                            <span className='text-white ml-5'>Continue with GitHub</span>\r\n                            </div>\r\n                        </button>\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login",["49","50"],"E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\components\\Header.js",[],"E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\components\\login\\LogInManager.js",["51","52"],"import firebase from \"firebase/app\"\r\nimport \"firebase/auth\"\r\nimport firebaseConfig from \"./firebase.config\"\r\n\r\n\r\n\r\n\r\nexport const initializeLoginFramework = () => {\r\n\r\n    // Set condition to protect firebase Re-render error\r\n    if (firebase.apps.length === 0) {\r\n        firebase.initializeApp(firebaseConfig)\r\n    }\r\n}\r\n\r\n// Google sign in handler\r\nexport const handleGoogleSignIn = () => {\r\n    // Set google provider\r\n    const googleProvider = new firebase.auth.GoogleAuthProvider()\r\n    // Open google pop up\r\n    return firebase.auth().signInWithPopup(googleProvider)\r\n        .then(result => {\r\n            const { displayName, email, photoURL } = result.user\r\n            // State for sign in user\r\n            const signInUser = {\r\n                isSignedIn: true,\r\n                name: displayName,\r\n                email: email,\r\n                photo: photoURL,\r\n                success: true,\r\n            }\r\n            return signInUser\r\n        })\r\n        .catch(error => {\r\n            const newUserInfo = { }\r\n            newUserInfo.error = error.message\r\n            newUserInfo.success = false\r\n            return newUserInfo\r\n        })\r\n}\r\n\r\n// Facebook sign in handler\r\nexport const handleFbSignIn = () => {\r\n    // Set facebook provider\r\n    const FbProvider = new firebase.auth.FacebookAuthProvider()\r\n     // Open facebook pop up\r\n    return firebase.auth().signInWithPopup(FbProvider)\r\n        .then(result => {\r\n            const token = result.credential.accessToken\r\n            const { displayName, email, photoURL } = result.user\r\n            // State for sign in user\r\n            const signInUser = {\r\n                isSignedIn: true,\r\n                name: displayName,\r\n                email: email,\r\n                photo: photoURL, \r\n                success: true,\r\n            }\r\n            return signInUser\r\n        })\r\n        .catch(error => {\r\n            const newUserInfo = { }\r\n            newUserInfo.error = error.message\r\n            newUserInfo.success = false\r\n            return newUserInfo\r\n        })\r\n}\r\n\r\n// GitHub sign in handler\r\nexport const handleGitHubSignIn = () => {\r\n    // Set github provider\r\n    const gitHubProvider = new firebase.auth.GithubAuthProvider()\r\n    // Open GitHub pop up\r\n    return firebase.auth().signInWithPopup(gitHubProvider)\r\n        .then(result => {\r\n            const token = result.credential.accessToken\r\n            const { displayName, email, photoURL } = result.user\r\n            // State for sign in user\r\n            const signInUser = {\r\n                isSignedIn: true,\r\n                name: displayName,\r\n                email: email,\r\n                photo: photoURL, \r\n                success: true,\r\n            }\r\n            return signInUser\r\n        })\r\n        .catch(function (error) {\r\n            const newUserInfo = { }\r\n            newUserInfo.error = error.message\r\n            newUserInfo.success = false\r\n            return newUserInfo\r\n        })\r\n}\r\n    \r\n// Sign out handler\r\nexport const handleSignOut = () => {\r\n    return firebase.auth().signOut()\r\n        .then(result => {\r\n            const signOutUser = {\r\n                isSignedIn: false,\r\n                name: '',\r\n                email: '',\r\n                photo: '',  \r\n            }\r\n            return signOutUser\r\n        })\r\n        .catch(error => {\r\n            console.log(error.message)\r\n        }) \r\n}\r\n\r\n// Sign up with email and password\r\nexport const createUserWithEmailAndPassword = (name, email, password) => { \r\n    return firebase.auth().createUserWithEmailAndPassword(email, password)\r\n        .then(response => {   \r\n            const newUserInfo = response.user\r\n            newUserInfo.error = ''\r\n            newUserInfo.SignUpSuccess = true\r\n            updateUserName(name)\r\n            return newUserInfo\r\n        })\r\n        .catch(error => {\r\n            const newUserInfo = { }\r\n            newUserInfo.error = error.message\r\n            newUserInfo.SignUpSuccess = false\r\n            return newUserInfo\r\n        })\r\n}\r\n\r\n// Sign In with email and password\r\nexport const signInWithEmailAndPassword = (email, password) => {\r\n    return firebase.auth().signInWithEmailAndPassword(email, password)\r\n        .then((response) => {\r\n            const { displayName, email } = response.user\r\n            // State for sign in user\r\n            const signInUser = {\r\n                isSignedIn: true,\r\n                name: displayName,\r\n                email: email,\r\n                success: true,\r\n            }\r\n            return signInUser\r\n        })\r\n        .catch(error => {\r\n            const newUserInfo = {}\r\n            newUserInfo.error = error.message\r\n            newUserInfo.success = false\r\n            return newUserInfo\r\n        })\r\n}\r\n\r\n// Send new user info to firebase\r\nconst updateUserName = (name) => {\r\n    const user = firebase.auth().currentUser\r\n    user.updateProfile({    \r\n        displayName: name, \r\n    })\r\n        .then(() => {  \r\n            console.log('User name updated successfully')\r\n        })\r\n        .catch((error) => {      \r\n            console.log('Error updating profile')\r\n        })\r\n}\r\n    \r\n\r\n","E:\\Web-Development-Final-Project\\apptivism-private-limited\\client\\src\\components\\PrivateRoute.js",["53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":29,"column":12,"nodeType":"60","messageId":"61","endLine":29,"endColumn":24},{"ruleId":"54","replacedBy":"62"},{"ruleId":"56","replacedBy":"63"},{"ruleId":"58","severity":1,"message":"64","line":49,"column":19,"nodeType":"60","messageId":"61","endLine":49,"endColumn":24},{"ruleId":"58","severity":1,"message":"64","line":76,"column":19,"nodeType":"60","messageId":"61","endLine":76,"endColumn":24},{"ruleId":"58","severity":1,"message":"65","line":10,"column":26,"nodeType":"60","messageId":"61","endLine":10,"endColumn":38},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'loggedInUser' is assigned a value but never used.","Identifier","unusedVar",["66"],["67"],"'token' is assigned a value but never used.","'setLogInUser' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]